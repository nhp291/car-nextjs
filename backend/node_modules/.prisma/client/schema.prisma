// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  phone       String?
  dateOfBirth DateTime?
  address     String?
  role        Role      @default(USER)
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  favorites     Favorite[]
  comparisons   Comparison[]
  reviews       Review[]
  sessions      Session[]
  notifications Notification[]
  testDrives    TestDrive[]
  inquiries     Inquiry[]

  // Social features
  following Follow[]  @relation("UserFollowing")
  followers Follow[]  @relation("UserFollowers")
  posts     Post[]
  comments  Comment[]
  likes     Like[]

  @@map("users")
}

model Car {
  id               String       @id @default(cuid())
  slug             String       @unique
  name             String
  brand            String
  model            String
  year             Int
  price            Decimal      @db.Decimal(12, 2)
  originalPrice    Decimal?     @db.Decimal(12, 2)
  mileage          Int          @default(0)
  condition        CarCondition @default(NEW)
  fuelType         FuelType
  transmission     Transmission
  driveType        DriveType
  engineSize       Decimal      @db.Decimal(3, 1)
  power            Int // HP
  torque           Int // Nm
  acceleration     Decimal?     @db.Decimal(3, 1)
  topSpeed         Int?
  fuelConsumption  Decimal?     @db.Decimal(3, 1)
  color            String
  description      String?      @db.Text
  shortDescription String?

  // Dimensions
  length          Int?
  width           Int?
  height          Int?
  wheelbase       Int?
  weight          Int?
  seatingCapacity Int  @default(5)

  // Media
  images         String[]
  videos         String[]
  virtualTourUrl String? // 360Â° virtual tour

  // Features & Safety
  features       String[]
  safetyFeatures String[]
  colors         String[]

  // Status
  isAvailable Boolean @default(true)
  isNew       Boolean @default(false)
  isPopular   Boolean @default(false)
  isFeatured  Boolean @default(false)
  stock       Int     @default(0)

  // Location & Dealer
  location String?
  dealerId String?
  dealer   Dealer? @relation(fields: [dealerId], references: [id])
  warranty String?

  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String[]

  // Ratings & Analytics
  rating        Decimal? @db.Decimal(2, 1)
  reviewCount   Int      @default(0)
  viewCount     Int      @default(0)
  favoriteCount Int      @default(0)

  // AI & Analytics
  aiScore      Decimal?       @db.Decimal(3, 2) // AI recommendation score
  priceHistory PriceHistory[]
  marketTrend  String? // UP, DOWN, STABLE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  favorites   Favorite[]
  comparisons ComparisonItem[]
  reviews     Review[]
  categories  CarCategory[]
  testDrives  TestDrive[]
  inquiries   Inquiry[]
  posts       Post[]
  likes       Like[]

  @@index([brand])
  @@index([fuelType])
  @@index([price])
  @@index([year])
  @@index([isAvailable])
  @@index([location])
  @@index([name, brand, model])
  @@map("cars")
}

model Dealer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  address     String
  website     String?
  logo        String?
  description String?
  rating      Decimal? @db.Decimal(2, 1)
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cars       Car[]
  testDrives TestDrive[]
  inquiries  Inquiry[]

  @@map("dealers")
}

model TestDrive {
  id          String          @id @default(cuid())
  userId      String
  carId       String
  dealerId    String?
  scheduledAt DateTime
  status      TestDriveStatus @default(PENDING)
  notes       String?
  feedback    String?
  rating      Int? // 1-5
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  car    Car     @relation(fields: [carId], references: [id])
  dealer Dealer? @relation(fields: [dealerId], references: [id])

  @@map("test_drives")
}

model Inquiry {
  id        String        @id @default(cuid())
  userId    String
  carId     String
  dealerId  String?
  type      InquiryType   @default(GENERAL)
  subject   String
  message   String        @db.Text
  status    InquiryStatus @default(OPEN)
  response  String?       @db.Text
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  car    Car     @relation(fields: [carId], references: [id])
  dealer Dealer? @relation(fields: [dealerId], references: [id])

  @@map("inquiries")
}

model PriceHistory {
  id        String   @id @default(cuid())
  carId     String
  price     Decimal  @db.Decimal(12, 2)
  reason    String? // MARKET_CHANGE, PROMOTION, etc.
  createdAt DateTime @default(now())

  car Car @relation(fields: [carId], references: [id])

  @@map("price_history")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowing", fields: [followerId], references: [id])
  following User @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  carId     String?
  title     String
  content   String   @db.Text
  images    String[]
  tags      String[]
  isPublic  Boolean  @default(true)
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  car      Car?      @relation(fields: [carId], references: [id])
  comments Comment[]
  likes    Like[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String   @db.Text
  parentId  String? // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  post    Post      @relation(fields: [postId], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  carId     String?
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id])
  car  Car?  @relation(fields: [carId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, carId])
  @@map("likes")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  icon        String? // Icon for category
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0) // For ordering
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cars CarCategory[]

  @@map("categories")
}

model CarCategory {
  carId      String
  categoryId String
  car        Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([carId, categoryId])
  @@map("car_categories")
}

model Favorite {
  id     String @id @default(cuid())
  userId String
  carId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  car  Car  @relation(fields: [carId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, carId])
  @@map("favorites")
}

model Comparison {
  id        String   @id @default(cuid())
  userId    String?
  name      String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  items ComparisonItem[]

  @@map("comparisons")
}

model ComparisonItem {
  id           String @id @default(cuid())
  comparisonId String
  carId        String
  order        Int    @default(0)

  comparison Comparison @relation(fields: [comparisonId], references: [id], onDelete: Cascade)
  car        Car        @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([comparisonId, carId])
  @@map("comparison_items")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  carId      String
  rating     Int // 1-5
  title      String
  content    String   @db.Text
  images     String[]
  pros       String[] // Pros list
  cons       String[] // Cons list
  likes      Int      @default(0)
  isVerified Boolean  @default(false)
  isHelpful  Int      @default(0) // Helpful votes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  car  Car  @relation(fields: [carId], references: [id])

  @@unique([userId, carId])
  @@map("reviews")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum Role {
  USER
  DEALER
  ADMIN
  SUPER_ADMIN
}

enum CarCondition {
  NEW
  USED
  CERTIFIED
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  PLUG_IN_HYBRID
  LPG
  CNG
}

enum Transmission {
  MANUAL
  AUTOMATIC
  CVT
  SEMI_AUTOMATIC
}

enum DriveType {
  FWD
  RWD
  AWD
  FOUR_WD
}

enum TestDriveStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum InquiryType {
  GENERAL
  PRICING
  FINANCING
  TRADE_IN
  WARRANTY
  TECHNICAL
}

enum InquiryStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum NotificationType {
  PRICE_DROP
  NEW_CAR_MATCH
  TEST_DRIVE_REMINDER
  INQUIRY_RESPONSE
  REVIEW_REPLY
  FOLLOW
  LIKE
  COMMENT
}
